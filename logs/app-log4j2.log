2022-08-25 17:31:45,204 INFO [main] org.springframework.cloud.config.client.ConfigServicePropertySourceLocator: Fetching config from server at : http://localhost:8084
2022-08-25 17:31:46,553 INFO [main] org.springframework.cloud.config.client.ConfigServicePropertySourceLocator: Located environment: name=banking, profiles=[default], label=null, version=4f74db47c026db8b5a62b8ac84a4b98645a3995e, state=null
2022-08-25 17:31:46,555 INFO [main] org.springframework.cloud.bootstrap.config.PropertySourceBootstrapConfiguration: Located property source: [BootstrapPropertySource {name='bootstrapProperties-configClient'}, BootstrapPropertySource {name='bootstrapProperties-https://github.com/mcastgir/bootcamp-project2-config-data.git/banking.yml'}]
2022-08-25 17:31:46,562 INFO [main] org.springframework.boot.SpringApplication: No active profile set, falling back to 1 default profile: "default"
2022-08-25 17:31:47,396 INFO [main] org.springframework.data.repository.config.RepositoryConfigurationDelegate: Bootstrapping Spring Data Reactive MongoDB repositories in DEFAULT mode.
2022-08-25 17:31:47,477 INFO [main] org.springframework.data.repository.config.RepositoryConfigurationDelegate: Finished Spring Data repository scanning in 76 ms. Found 6 Reactive MongoDB repository interfaces.
2022-08-25 17:31:47,718 INFO [main] org.springframework.cloud.context.scope.GenericScope: BeanFactory id=912feef5-7b83-315a-9d23-9a4eab85aa31
2022-08-25 17:31:47,940 INFO [main] org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker: Bean 'org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration' of type [org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-08-25 17:31:47,946 INFO [main] org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker: Bean 'org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration$ReactorDeferringLoadBalancerFilterConfig' of type [org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration$ReactorDeferringLoadBalancerFilterConfig] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-08-25 17:31:47,950 INFO [main] org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker: Bean 'reactorDeferringLoadBalancerExchangeFilterFunction' of type [org.springframework.cloud.client.loadbalancer.reactive.DeferringLoadBalancerExchangeFilterFunction] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-08-25 17:31:49,179 INFO [main] com.mongodb.diagnostics.logging.SLF4JLogger: MongoClient with metadata {"driver": {"name": "mongo-java-driver|reactive-streams|spring-boot", "version": "4.6.1"}, "os": {"type": "Windows", "name": "Windows 10", "architecture": "amd64", "version": "10.0"}, "platform": "Java/Oracle Corporation/12.0.2+10"} created with settings MongoClientSettings{readPreference=primary, writeConcern=WriteConcern{w=null, wTimeout=null ms, journal=null}, retryWrites=true, retryReads=true, readConcern=ReadConcern{level=null}, credential=null, streamFactoryFactory=NettyStreamFactoryFactory{eventLoopGroup=io.netty.channel.nio.NioEventLoopGroup@10745a02, socketChannelClass=class io.netty.channel.socket.nio.NioSocketChannel, allocator=PooledByteBufAllocator(directByDefault: true), sslContext=null}, commandListeners=[io.micrometer.core.instrument.binder.mongodb.MongoMetricsCommandListener@3e2d8623], codecRegistry=ProvidersCodecRegistry{codecProviders=[ValueCodecProvider{}, BsonValueCodecProvider{}, DBRefCodecProvider{}, DBObjectCodecProvider{}, DocumentCodecProvider{}, IterableCodecProvider{}, MapCodecProvider{}, GeoJsonCodecProvider{}, GridFSFileCodecProvider{}, Jsr310CodecProvider{}, JsonObjectCodecProvider{}, BsonCodecProvider{}, EnumCodecProvider{}, com.mongodb.Jep395RecordCodecProvider@72715e61]}, clusterSettings={hosts=[localhost:27017], srvServiceName=mongodb, mode=SINGLE, requiredClusterType=UNKNOWN, requiredReplicaSetName='null', serverSelector='null', clusterListeners='[]', serverSelectionTimeout='30000 ms', localThreshold='30000 ms'}, socketSettings=SocketSettings{connectTimeoutMS=10000, readTimeoutMS=0, receiveBufferSize=0, sendBufferSize=0}, heartbeatSocketSettings=SocketSettings{connectTimeoutMS=10000, readTimeoutMS=10000, receiveBufferSize=0, sendBufferSize=0}, connectionPoolSettings=ConnectionPoolSettings{maxSize=100, minSize=0, maxWaitTimeMS=120000, maxConnectionLifeTimeMS=0, maxConnectionIdleTimeMS=0, maintenanceInitialDelayMS=0, maintenanceFrequencyMS=60000, connectionPoolListeners=[io.micrometer.core.instrument.binder.mongodb.MongoMetricsConnectionPoolListener@68f776ee], maxConnecting=2}, serverSettings=ServerSettings{heartbeatFrequencyMS=10000, minHeartbeatFrequencyMS=500, serverListeners='[]', serverMonitorListeners='[]'}, sslSettings=SslSettings{enabled=false, invalidHostNameAllowed=false, context=null}, applicationName='null', compressorList=[], uuidRepresentation=JAVA_LEGACY, serverApi=null, autoEncryptionSettings=null, contextProvider=null}
2022-08-25 17:31:49,264 WARN [main] org.springframework.data.convert.CustomConversions: Registering converter from class java.time.LocalDateTime to class org.joda.time.LocalDateTime as reading converter although it doesn't convert from a store-supported type; You might want to check your annotation setup at the converter implementation
2022-08-25 17:31:49,467 WARN [main] org.springframework.data.convert.CustomConversions: Registering converter from class java.time.LocalDateTime to class org.joda.time.LocalDateTime as reading converter although it doesn't convert from a store-supported type; You might want to check your annotation setup at the converter implementation
2022-08-25 17:31:50,482 INFO [cluster-ClusterId{value='6307f85540b94a1a3c92f7fb', description='null'}-localhost:27017] com.mongodb.diagnostics.logging.SLF4JLogger: Opened connection [connectionId{localValue:2, serverValue:31}] to localhost:27017
2022-08-25 17:31:50,482 INFO [cluster-rtt-ClusterId{value='6307f85540b94a1a3c92f7fb', description='null'}-localhost:27017] com.mongodb.diagnostics.logging.SLF4JLogger: Opened connection [connectionId{localValue:1, serverValue:32}] to localhost:27017
2022-08-25 17:31:50,483 INFO [cluster-ClusterId{value='6307f85540b94a1a3c92f7fb', description='null'}-localhost:27017] com.mongodb.diagnostics.logging.SLF4JLogger: Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, state=CONNECTED, ok=true, minWireVersion=0, maxWireVersion=17, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=47716500}
2022-08-25 17:31:51,971 INFO [main] org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver: Exposing 26 endpoint(s) beneath base path '/actuator'
2022-08-25 17:31:52,890 INFO [main] org.springframework.cloud.netflix.eureka.config.DiscoveryClientOptionalArgsConfiguration: Eureka HTTP Client uses RestTemplate.
2022-08-25 17:31:53,051 WARN [main] org.springframework.cloud.loadbalancer.config.LoadBalancerCacheAutoConfiguration$LoadBalancerCaffeineWarnLogger: Spring Cloud LoadBalancer is currently working with the default cache. While this cache implementation is useful for development and tests, it's recommended to use Caffeine cache in production.You can switch to using Caffeine cache, by adding it and org.springframework.cache.caffeine.CaffeineCacheManager to the classpath.
2022-08-25 17:31:53,106 INFO [main] org.springframework.cloud.netflix.eureka.InstanceInfoFactory: Setting initial instance status as: STARTING
2022-08-25 17:31:53,143 INFO [main] com.netflix.discovery.DiscoveryClient: Initializing Eureka in region us-east-1
2022-08-25 17:31:53,147 INFO [main] com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver: Resolving eureka endpoints via configuration
2022-08-25 17:31:53,171 INFO [main] com.netflix.discovery.DiscoveryClient: Disable delta property : false
2022-08-25 17:31:53,171 INFO [main] com.netflix.discovery.DiscoveryClient: Single vip registry refresh property : null
2022-08-25 17:31:53,171 INFO [main] com.netflix.discovery.DiscoveryClient: Force full registry fetch : false
2022-08-25 17:31:53,172 INFO [main] com.netflix.discovery.DiscoveryClient: Application is null : false
2022-08-25 17:31:53,172 INFO [main] com.netflix.discovery.DiscoveryClient: Registered Applications size is zero : true
2022-08-25 17:31:53,172 INFO [main] com.netflix.discovery.DiscoveryClient: Application version is -1: true
2022-08-25 17:31:53,172 INFO [main] com.netflix.discovery.DiscoveryClient: Getting all instance registry info from the eureka server
2022-08-25 17:31:53,485 INFO [main] com.netflix.discovery.DiscoveryClient: The response status is 200
2022-08-25 17:31:53,488 INFO [main] com.netflix.discovery.DiscoveryClient: Starting heartbeat executor: renew interval is: 30
2022-08-25 17:31:53,490 INFO [main] com.netflix.discovery.InstanceInfoReplicator: InstanceInfoReplicator onDemand update allowed rate per min is 4
2022-08-25 17:31:53,498 INFO [main] com.netflix.discovery.DiscoveryClient: Discovery Client initialized at timestamp 1661466713497 with initial instances count: 3
2022-08-25 17:31:53,510 INFO [main] org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry: Registering application BANKING with eureka with status UP
2022-08-25 17:31:53,511 INFO [main] com.netflix.discovery.DiscoveryClient$3: Saw local status change event StatusChangeEvent [timestamp=1661466713511, current=UP, previous=STARTING]
2022-08-25 17:31:53,516 INFO [DiscoveryClient-InstanceInfoReplicator-0] com.netflix.discovery.DiscoveryClient: DiscoveryClient_BANKING/host.docker.internal:banking:8088: registering service...
2022-08-25 17:31:53,572 INFO [DiscoveryClient-InstanceInfoReplicator-0] com.netflix.discovery.DiscoveryClient: DiscoveryClient_BANKING/host.docker.internal:banking:8088 - registration status: 204
2022-08-25 17:31:53,572 INFO [main] org.springframework.boot.web.embedded.netty.NettyWebServer: Netty started on port 8088
2022-08-25 17:31:53,574 INFO [main] org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration: Updating port to 8088
2022-08-25 17:31:54,961 INFO [main] org.springframework.boot.StartupInfoLogger: Started BankingApplication in 12.005 seconds (JVM running for 12.94)
2022-08-25 17:31:54,964 INFO [main] com.nttdata.bootcamp.banking.BankingApplication: Init Project
2022-08-25 17:31:54,964 WARN [main] com.nttdata.bootcamp.banking.BankingApplication: warning de prueba
2022-08-25 17:31:54,964 ERROR [main] com.nttdata.bootcamp.banking.BankingApplication: erro de prueba
2022-08-25 17:36:53,178 INFO [AsyncResolver-bootstrap-executor-0] com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver: Resolving eureka endpoints via configuration
